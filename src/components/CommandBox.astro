---

interface Props {
  command: string;
}

const { command } = Astro.props;
---

<div 
  class="bg-black py-2 sm:py-5 md:py-6  sm:px-6 md:px-8 border border-gray-800 font-mono text-sm sm:text-base md:text-lg relative cursor-pointer transition-all duration-200 hover:bg-zinc-900 overflow-x-auto w-full max-w-full" 
  id="command"
  role="button"
  aria-label="Click to copy command"
  tabindex="0"
>
  <span id="cmd-text" class="whitespace-nowrap">{command}</span>
  <div class="absolute -top-10 sm:-top-12 left-1/2 transform -translate-x-1/2 bg-black py-1 px-3 rounded text-sm opacity-0 transition-opacity duration-300 border border-gray-700 z-10 pointer-events-none" id="notification">Copied!</div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const command = document.getElementById('command');
    const notification = document.getElementById('notification');
    const cmdText = document.getElementById('cmd-text');

    if (command && notification && cmdText) {
      const copyCommand = () => {
        const textToCopy = cmdText.textContent || '';
        navigator.clipboard.writeText(textToCopy)
          .then(() => {
            notification.classList.add('opacity-100');
            setTimeout(() => {
              notification.classList.remove('opacity-100');
            }, 2000);
          })
          .catch(err => {
            console.error('Failed to copy: ', err);
          });
      };

      command.addEventListener('click', copyCommand);
      command.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          copyCommand();
        }
      });
    }
  });
</script> 